'''
## TO DO
implement update win condition
implement update tie condition

write tic tac ai for computer move
  list available squares
  score each square
  1 for each row / column / diagonal with 1 X
  5 for each with 2 Xs
  25 for each with 3 Xs
  offense picks the move with the highest score
  defense blocks the opponents highest score
  list valid first moves and select randomly
  list choices with same score and select randomly?

outer while loop to play again?

keep score?

add zero player mode to test strategies
add two player mode
add computer goes first mode

improve display

version with board class & methods?

implement tic tac toe api?


'''
## CONSTANTS
symbols = [" ", "X", "O", " ", "1", "2", "3"]

board = [
  [3, 4, 5, 6],
  [4, 0, 0, 0],
  [5, 0, 0, 0],
  [6, 0, 0, 0]
]

row_with_dividers = [1, 2, 3]


## FUNCTIONS
from random import randint

def display_cell(r, c):
  index = board[r][c]
  return symbols[index]
  
def display_board():
  
  for row in range(3 + 1):
    line = ""

    for col in range(3 + 1):
      if row in row_with_dividers:
        line += " " + display_cell(row, col) + " "

        divider = ("|" if col > 0 else " ")
        line += divider
        
      else:
        line += " " + display_cell(row, col) + " " + " "
      
    line = line[:-2]
    print(line)

    if row in row_with_dividers[0:2]:
      print("     - + - + - ")
    else:
      print("\n")
    

def is_valid(r, c):
  '''
  IN: two integers represent row and column
  OUT: one boolean
  EX: 1, 3 --> TRUE
  4, 3 --> FALSE because no row 4 in tic tac toe
  '''

  if r < 1 or r > 3:
    return False
  if c < 1 or c > 3:
    return False
  if board[r][c] != 0:
    return False

  return True

def player_moves():
  valid = is_valid(100, 100)
  while not valid:
    row = int(input("What row? "))
    col = int(input("What column? "))
    valid = is_valid(row, col)

    if not valid:
      print("That move is not available \n")
    else:
      board[row][col] = 1

def computer_moves():
  valid = is_valid(100, 100)
  while not valid:
    row = randint(1, 3)
    col = randint(1, 3)
    valid = is_valid(row, col)

    if valid:
      board[row][col] = 2

def is_tie():
  for r in range(3):
    for c in range(3):
      if board[r][c] == 0:
        return False
  return True
  
def tic_tac_toe():
  display_board()
  
  win = False
  tie = False

  turn = 1
  while not(win or tie):
    if turn % 2 == 1:
      # player moves
        player_moves()

    else:
      # computer moves
        computer_moves()
        display_board()
      
    turn += 1

    # test for win

    # test for tie
    tie = is_tie()

    if tie:
      print("Tie game!")

## MAIN
tic_tac_toe()
